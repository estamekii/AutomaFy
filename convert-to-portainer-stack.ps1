# AutomaFy - Portainer Stack Converter
# Script para converter stacks externas em stacks edit√°veis no Portainer

param(
    [string]$StackName = "automafy-stack",
    [string]$OutputFile = "automafy-stack.yml",
    [switch]$StopContainers = $false,
    [switch]$Help = $false
)

if ($Help) {
    Write-Host "=== AutomaFy Portainer Stack Converter ===" -ForegroundColor Green
    Write-Host ""
    Write-Host "Uso: .\convert-to-portainer-stack.ps1 [op√ß√µes]" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "Op√ß√µes:"
    Write-Host "  -StackName <nome>     Nome da stack (padr√£o: automafy-stack)"
    Write-Host "  -OutputFile <arquivo> Arquivo de sa√≠da (padr√£o: automafy-stack.yml)"
    Write-Host "  -StopContainers       Para containers antes da convers√£o"
    Write-Host "  -Help                 Mostra esta ajuda"
    Write-Host ""
    Write-Host "Exemplo:"
    Write-Host "  .\convert-to-portainer-stack.ps1 -StackName 'minha-stack' -OutputFile 'minha-stack.yml'"
    exit 0
}

Write-Host "=== AutomaFy Portainer Stack Converter ===" -ForegroundColor Green
Write-Host "Convertendo stacks externas para stacks edit√°veis no Portainer..." -ForegroundColor Cyan
Write-Host ""

# Verificar se Docker est√° rodando
try {
    docker version | Out-Null
    Write-Host "‚úì Docker est√° rodando" -ForegroundColor Green
} catch {
    Write-Host "‚úó Docker n√£o est√° rodando ou n√£o est√° instalado" -ForegroundColor Red
    Write-Host "Por favor, inicie o Docker e tente novamente."
    exit 1
}

# Verificar se h√° containers rodando
$runningContainers = docker ps -q
if (-not $runningContainers) {
    Write-Host "‚ö† Nenhum container est√° rodando atualmente" -ForegroundColor Yellow
    Write-Host "Certifique-se de que seus containers est√£o rodando antes de executar este script."
    exit 1
}

Write-Host "‚úì Encontrados $($runningContainers.Count) container(s) rodando" -ForegroundColor Green

# Verificar se docker-autocompose est√° instalado
try {
    pip show docker-autocompose | Out-Null
    Write-Host "‚úì docker-autocompose j√° est√° instalado" -ForegroundColor Green
} catch {
    Write-Host "‚ö† docker-autocompose n√£o encontrado. Instalando..." -ForegroundColor Yellow
    try {
        pip install docker-autocompose
        Write-Host "‚úì docker-autocompose instalado com sucesso" -ForegroundColor Green
    } catch {
        Write-Host "‚úó Erro ao instalar docker-autocompose" -ForegroundColor Red
        Write-Host "Por favor, instale manualmente: pip install docker-autocompose"
        exit 1
    }
}

# Parar containers se solicitado
if ($StopContainers) {
    Write-Host "‚ö† Parando containers..." -ForegroundColor Yellow
    docker stop $runningContainers
    Write-Host "‚úì Containers parados" -ForegroundColor Green
    
    # Aguardar um pouco para garantir que pararam
    Start-Sleep -Seconds 3
    
    # Reiniciar containers para gerar o compose
    Write-Host "‚Üª Reiniciando containers para gerar compose..." -ForegroundColor Cyan
    docker start $runningContainers
    Start-Sleep -Seconds 5
}

# Gerar arquivo docker-compose
Write-Host "üìù Gerando arquivo docker-compose..." -ForegroundColor Cyan
try {
    docker-autocompose --format=yaml > $OutputFile
    Write-Host "‚úì Arquivo gerado: $OutputFile" -ForegroundColor Green
} catch {
    Write-Host "‚úó Erro ao gerar arquivo docker-compose" -ForegroundColor Red
    exit 1
}

# Verificar se o arquivo foi criado e tem conte√∫do
if (Test-Path $OutputFile) {
    $fileSize = (Get-Item $OutputFile).Length
    if ($fileSize -gt 0) {
        Write-Host "‚úì Arquivo criado com sucesso ($fileSize bytes)" -ForegroundColor Green
    } else {
        Write-Host "‚úó Arquivo criado mas est√° vazio" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚úó Arquivo n√£o foi criado" -ForegroundColor Red
    exit 1
}

# Mostrar pr√©via do arquivo
Write-Host ""
Write-Host "üìã Pr√©via do arquivo gerado:" -ForegroundColor Cyan
Write-Host "" + "-" * 50 -ForegroundColor Gray
Get-Content $OutputFile | Select-Object -First 20 | ForEach-Object { Write-Host $_ -ForegroundColor White }
if ((Get-Content $OutputFile).Count -gt 20) {
    Write-Host "... (arquivo truncado, veja $OutputFile para conte√∫do completo)" -ForegroundColor Gray
}
Write-Host "" + "-" * 50 -ForegroundColor Gray
Write-Host ""

# Instru√ß√µes finais
Write-Host "üéâ Convers√£o conclu√≠da com sucesso!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "1. Acesse seu Portainer (geralmente http://localhost:9000)" -ForegroundColor White
Write-Host "2. V√° em 'Stacks' ‚Üí 'Add Stack'" -ForegroundColor White
Write-Host "3. Nome da stack: '$StackName'" -ForegroundColor White
Write-Host "4. Escolha 'Upload' e selecione o arquivo: '$OutputFile'" -ForegroundColor White
Write-Host "   OU escolha 'Web Editor' e cole o conte√∫do do arquivo" -ForegroundColor White
Write-Host "5. Configure vari√°veis de ambiente se necess√°rio" -ForegroundColor White
Write-Host "6. Clique em 'Deploy the stack'" -ForegroundColor White
Write-Host ""
Write-Host "‚ö† Importante:" -ForegroundColor Yellow
Write-Host "- Pare os containers atuais antes de criar a nova stack no Portainer" -ForegroundColor White
Write-Host "- A nova stack ser√° totalmente edit√°vel no Portainer" -ForegroundColor White
Write-Host "- Fa√ßa backup dos dados importantes antes de proceder" -ForegroundColor White
Write-Host ""
Write-Host "üîß Comandos √∫teis:" -ForegroundColor Cyan
Write-Host "Para parar containers atuais: docker stop `$(docker ps -q)" -ForegroundColor White
Write-Host "Para remover containers: docker rm `$(docker ps -aq)" -ForegroundColor White
Write-Host "Para limpar volumes √≥rf√£os: docker volume prune" -ForegroundColor White
Write-Host ""
Write-Host "AutomaFy Web - Solu√ß√£o completa para automa√ß√£o" -ForegroundColor Green